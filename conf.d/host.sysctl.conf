# ======================================================================
# Linux内核参数优化配置文件 - 集成Swoole 6.0.2和e1000e网络适配器优化
# 基于系统硬件: 98GB内存, 32核心CPU
# 适配网络适配器: Intel Ethernet Connection (17) I219-LM (enp0s31f6) - e1000e驱动
# 集成功能: Swoole 6.0.2性能优化 + e1000e网络适配器稳定性修复
# 合并来源: host.sysctl.conf.bak, host.sysctl.conf.bak.e1000e, host.sysctl.conf.bak.swoole
# ======================================================================


# ================================ 内存管理优化 ================================
# 控制系统的交换行为，0-100，值越大越倾向于使用swap
# 对于大内存服务器，设为10以优先使用物理内存，适合Swoole内存密集型应用
# 注意：原host.sysctl.conf.bak中有vm.swappiness = 0和vm.swappiness = 20的设置，
# 保留当前值10作为平衡选择
vm.swappiness = 10

# 系统在开始写入脏数据到磁盘之前，可以容忍的脏数据百分比
# 从10调整为60，减少磁盘I/O频率，提高Swoole性能
vm.dirty_ratio = 60

# 后台进程开始将脏数据写入磁盘的百分比
# 从5调整为2，优化后台写入行为
vm.dirty_background_ratio = 2

# 脏数据在内存中停留的最长时间（毫秒）
vm.dirty_expire_centisecs = 3000

# 系统定期检查脏数据的时间间隔（毫秒）
vm.dirty_writeback_centisecs = 500

# 强制Linux VM最低保留的空闲内存（Kbytes）
# 根据系统内存大小调整，对于98GB内存设为1GB
vm.min_free_kbytes = 1048576

# 控制内核回收目录和inode缓存的倾向，默认100
# 从150调整为50，减少缓存回收，提高文件操作性能
# 注意：原host.sysctl.conf.bak中有vm.vfs_cache_pressure = 250的设置，
# 当前值50更适合内存密集型应用
vm.vfs_cache_pressure = 50

# OOM时是否触发panic，设为0允许系统尝试恢复
# 注意：原host.sysctl.conf.bak中有vm.panic_on_oom = 1的设置，
# 当前值0允许系统尝试自我恢复
vm.panic_on_oom = 0

# 允许超量分配内存，适合Swoole等内存密集型应用
vm.overcommit_memory = 1

# 增加系统的最大共享内存段大小 (字节)
# 根据系统内存调整，当前设置为16GB，适合Swoole大量共享内存使用场景
kernel.shmmax = 17179869184

# 增加系统的共享内存页数
# 通常设置为物理内存的一半，支持Swoole的大规模并发
kernel.shmall = 4194304


# ================================ 文件系统优化 ================================
# 设置系统所有进程一共可以打开的文件数量上限
# 大幅增加以应对Swoole的高并发场景
fs.file-max = 40000500

# 单个进程可以打开的最大文件数
# 为Swoole工作进程提供充足的文件描述符资源
fs.nr_open = 40000500


# ================================ 共享内存和信号量 ===========================
# 系统信号量参数设置：SEMMSL(每个用户的最大信号量数), SEMMNS(系统信号量总数),
# SEMOPM(每个semop调用的最大操作数), SEMMNI(系统信号量集总数)
# 优化以支持高并发进程间通信，适合Swoole的多进程模式
# 注意：原配置文件中存在不同的值，当前值50100 128256000 50100 2560
# 提供了更高的并发支持
kernel.sem = 50100 128256000 50100 2560

# 系统共享内存段数量上限
# 增加以支持Swoole多进程间的共享内存通信
# 注意：原host.sysctl.conf.bak.e1000e和host.sysctl.conf.bak.swoole中有
# kernel.shmmni = 32768的设置，当前值4096更合理
kernel.shmmni = 4096

# 消息队列标识符数量上限
kernel.msgmni = 32768

# 单个消息的最大大小（字节）
kernel.msgmax = 65536

# 单个消息队列的最大大小（字节）
kernel.msgmnb = 4203520


# ================================ 内核优化 ================================
# 内核恐慌时自动重启的时间（秒）
# 注意：原host.sysctl.conf.bak中有kernel.panic = 1的设置，
# 当前值10提供了更合理的重启时间
kernel.panic = 10

# 系统PID号的最大值
# 从32768增大到4194303以支持Swoole多进程模式
# 注意：原host.sysctl.conf.bak.e1000e和host.sysctl.conf.bak.swoole中有
# kernel.pid_max = 32768的设置，当前值4194303提供了更大的进程支持
kernel.pid_max = 4194303

# 程序崩溃时生成的core文件名格式
kernel.core_pattern = core_%e

# 关闭sysrq组合键，提高系统安全性
kernel.sysrq = 0

# perf分析工具最大能够占用CPU性能的百分比
# 注意：原host.sysctl.conf.bak中有kernel.perf_cpu_time_max_percent=60的设置，
# 当前值30更合理，避免perf过度占用CPU
kernel.perf_cpu_time_max_percent = 30

# 设置perf_event的最大取样速率
kernel.perf_event_max_sample_rate = 6250

# 进程迁移成本（纳秒），注释掉以使用系统默认值
# kernel.sched_migration_cost_ns=5000000


# ================================ 网络基础优化 ================================
# IPv6相关配置 - 保持lo接口启用IPv6，其他接口禁用
# net.ipv6.conf.all.disable_ipv6 = 1  # 注释掉以避免影响nfs rpcbind服务
# net.ipv6.conf.default.disable_ipv6 = 1
# net.ipv6.conf.lo.disable_ipv6 = 1

# 关闭IP转发，除非作为路由器使用
net.ipv4.ip_forward = 0

# IP数据包的生存时间(TTL)
# 64是常用的标准值，平衡网络传输距离和安全性
net.ipv4.ip_default_ttl = 64


# ================================ TCP/IP连接优化 ================================
# 开启SYN Cookies，可以防范SYN洪水攻击
# 对Swoole高并发服务提供基本的DDoS防护能力
net.ipv4.tcp_syncookies = 1

# 设置SYN队列长度，提高并发连接处理能力
# 针对多核CPU和高并发场景大幅提升，适合Swoole的短连接处理
net.ipv4.tcp_max_syn_backlog = 3240000

# 定义SYN重试次数，减少连接建立时间
# 降低重试次数以加快连接失败的响应速度
# 注意：原host.sysctl.conf.bak中有tcp_syn_retries=2和tcp_synack_retries=2的设置，
# 当前值3提供了更好的连接稳定性
net.ipv4.tcp_syn_retries = 3
net.ipv4.tcp_synack_retries = 3

# 优化TIME-WAIT状态连接处理
# 允许重用处于TIME-WAIT状态的连接，对Swoole的大量短连接场景非常重要
net.ipv4.tcp_tw_reuse = 1
# 不启用快速回收，避免NAT环境下的问题
# net.ipv4.tcp_tw_recycle = 1

# 系统同时保持TIME-WAIT的最大数量，设为合理值避免连接被过早关闭
# 平衡资源占用和连接可用性，适合Swoole的高并发场景
# 注意：原host.sysctl.conf.bak中有tcp_max_tw_buckets=100、5000和20000的设置，
# 当前值180000提供了更好的平衡
net.ipv4.tcp_max_tw_buckets = 180000

# 减少FIN-WAIT-2连接状态的超时时间，加速连接释放
# 设置为15秒，加快资源回收，适合Swoole的短连接模式
# 注意：原host.sysctl.conf.bak中有tcp_fin_timeout=5和10的设置，
# 当前值15提供了更好的平衡
net.ipv4.tcp_fin_timeout = 15

# TCP连接保持活跃的时间（秒），避免长时间占用资源
# 从默认的7200秒减少到600秒，适合Swoole的连接管理机制
# 注意：原host.sysctl.conf.bak中有tcp_keepalive_time=10、60和300的设置，
# 当前值600更适合生产环境
net.ipv4.tcp_keepalive_time = 600

# 探测失败后的重试间隔（秒）
# 注意：原host.sysctl.conf.bak中有tcp_keepalive_intvl=2的设置，
# 当前值15提供了更好的平衡
net.ipv4.tcp_keepalive_intvl = 15

# 探测失败多少次后认为连接已断开
# 注意：原host.sysctl.conf.bak中有tcp_keepalive_probes=2的设置，
# 当前值3提供了更好的稳定性
net.ipv4.tcp_keepalive_probes = 3

# 开启TCP时间戳选项，可以防止重复ACK攻击
# 同时有助于TCP重传和拥塞控制，对e1000e网卡稳定性有帮助
# 注意：原host.sysctl.conf.bak中有tcp_timestamps=0的设置，
# 当前值1提供了更好的网络稳定性
net.ipv4.tcp_timestamps = 1

# 开启TCP窗口缩放功能，提高带宽利用率
# 对大吞吐量的Swoole应用和高速网络环境很重要
net.ipv4.tcp_window_scaling = 1

# 开启TCP连接的MTU探测功能，动态适应网络环境
net.ipv4.tcp_mtu_probing = 1


# ================================ 网络缓冲区优化 ================================
# 系统可用处理不属于任何进程的TCP套接字最大数量
# 大幅增加以应对Swoole的高并发场景
net.ipv4.tcp_max_orphans = 1048576

# 内存使用的下限、警戒值、上限（页）
# 根据系统98GB内存大小优化，适合Swoole应用特点
# 从379008 505344 758016调整为更适合大内存的768432 2097152 15242880
net.ipv4.tcp_mem = 768432 2097152 15242880

# socket接收缓冲区内存使用的下限、警戒值、上限（字节）
# 优化以支持高带宽网络传输
net.ipv4.tcp_rmem = 4096 87380 67108864

# socket发送缓冲区内存使用的下限、警戒值、上限（字节）
# 优化以支持高带宽网络传输
net.ipv4.tcp_wmem = 4096 65536 67108864

# 默认的TCP数据接收窗口大小（字节）
# 从8MB增加到18MB，优化Swoole的网络性能
net.core.rmem_default = 18388608

# 默认的TCP数据发送窗口大小（字节）
# 从8MB增加到18MB，优化Swoole的网络性能
net.core.wmem_default = 18388608

# 最大的TCP数据接收窗口大小（字节）
# 从16MB增加到32MB，充分利用98GB内存优势
net.core.rmem_max = 33554432

# 最大的TCP数据发送窗口大小（字节）
# 从16MB增加到32MB，充分利用98GB内存优势
net.core.wmem_max = 33554432

# 每个套接字所允许的最大缓冲区大小（字节）
net.core.optmem_max = 25165824


# ================================ 网络队列优化 ================================
# 已建立连接的套接字队列长度
# 增加到65535以应对Swoole的高并发连接
net.core.somaxconn = 65535

# 网卡设备将请求放入队列的最大长度
# 根据32核CPU处理能力调整，避免队列过长导致延迟增加
net.core.netdev_max_backlog = 2621244


# ================================ 端口和路由优化 ================================
# 允许系统使用的本地端口范围
# 扩大端口范围以支持更多并发连接
net.ipv4.ip_local_port_range = 10000 65000

# 系统路由表的最大条目数
# 增加以支持复杂网络环境
net.ipv4.route.max_size = 5242880


# ================================ ARP缓存优化 ================================
# 决定检查过期邻居条目的时间间隔（秒）
net.ipv4.neigh.default.gc_stale_time = 120

# ARP表缓存的最小、警告、最大值
# 优化以支持大规模网络环境
net.ipv4.neigh.default.gc_thresh1 = 128
net.ipv4.neigh.default.gc_thresh2 = 512
net.ipv4.neigh.default.gc_thresh3 = 4096

# 优化ARP通告行为
# 设置为2表示使用最精确的本地地址，提高网络安全性
net.ipv4.conf.default.arp_announce = 2
net.ipv4.conf.all.arp_announce = 2
net.ipv4.conf.lo.arp_announce = 2


# ================================ 网络安全优化 ================================
# 开启并记录欺骗、源路由和重定向包
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1

# 禁止接受源路由的包
# 提高系统安全性
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0

# 禁止接受ICMP重定向包
# 提高系统安全性，但不影响正常网络通信
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0

# 配置反向路径过滤 - 宽松模式，避免在复杂网络环境下误判
# 从严格模式调整为宽松模式，避免在NAT环境下的连接问题
net.ipv4.conf.all.rp_filter = 0
net.ipv4.conf.default.rp_filter = 0


# ================================ 连接跟踪优化 ================================
# 设置conntrack表的最大条目数，避免出现表满导致的丢包
# 增加以支持Swoole的高并发连接跟踪
net.netfilter.nf_conntrack_max = 1000000
net.nf_conntrack_max = 1000000


# ================================ 高级网络优化 ================================
# 启用BBR拥塞控制算法，提高网络传输速度
# 对高延迟、高带宽网络特别有效，优化Swoole的网络传输性能
net.core.default_qdisc = fq
net.ipv4.tcp_congestion_control = bbr


# ================================ Unix域套接字优化 ================================
# Unix域套接字数据报队列长度
# 从100增加到1000，大幅提升Swoole进程间通信性能
net.unix.max_dgram_qlen = 1000


# ================================ Swoole & e1000e 专用优化 ================================
# 集成Swoole 6.0.2和Intel e1000e网卡的专用优化参数

# 优化e1000e网卡稳定性的参数
# 禁用TCP空闲后的慢启动，保持连接性能稳定
net.ipv4.tcp_slow_start_after_idle = 0

# 不保存关闭连接的TCP状态信息，减少资源占用
net.ipv4.tcp_no_metrics_save = 1

# 关闭TCP ECN（显式拥塞通知），避免某些网络环境下的兼容性问题
# 对e1000e网卡的稳定性有帮助
net.ipv4.tcp_ecn = 0

# 优化e1000e网卡的TCP重传和恢复机制
net.ipv4.tcp_retrans_collapse = 0

# 启用TCP快速恢复算法
net.ipv4.tcp_fack = 1

# Swoole专用优化参数
# 启用TCP选择确认机制，提高Swoole的网络传输效率
net.ipv4.tcp_sack = 1

# 调整内核网络栈参数，提升Swoole性能
# 启用低延迟模式，对Swoole协程调度性能有帮助
net.ipv4.tcp_low_latency = 1

# 额外的系统安全参数
# 确保IP路由表安全
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0

# 确保系统不会因过多的TIME-WAIT连接而耗尽资源
# 已在TCP/IP连接优化部分设置

# 注意：以下参数已在前面的分类中设置，此处不再重复设置
# - 网络缓冲区参数（已在网络缓冲区优化中设置为更大的值）
# - TCP内存管理参数（已在网络缓冲区优化中优化）
# - Unix套接字参数（已在Unix域套接字优化中设置为1000）
# - 网络队列参数（已在网络队列优化中设置为更高的值）
# - BBR拥塞控制（已在高级网络优化中设置）